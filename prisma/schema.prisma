// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  posts     BlogPost[] 
}

model Event {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  image         String?
  date          DateTime
  location      String?
  organizerId   String            @db.ObjectId
  organizer     User              @relation(fields: [organizerId], references: [id])
  eventSpeakers EventSpeaker[]    
  registrations EventRegistration[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Speaker {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  image         String?
  Job           String?
  eventSpeakers EventSpeaker[] 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model EventSpeaker {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  speakerId String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  speaker   Speaker  @relation(fields: [speakerId], references: [id])
  createdAt DateTime @default(now())
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug        String   @unique
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventRegistration {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   
  email     String   
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
}

model Waitlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
